{"shell":true,"revision":"27f939fee5fea6d498675e294457382a834f6cd3","objects":[{"type":null,"source":"lib/cassandra_ecto.ex:2","object_type":"ModuleObject","moduledoc":"Ecto integration with Cassandra.\n\nCassandra adapter implements 3 behaviours:\n\n* `Ecto.Adapter`\n* `Ecto.Adapter.Storage`\n* `Ecto.Adapter.Migration`\n\nEvery behaviour implementation stays in separate file with appropriate docs.\nPlease view for more information:\n\n* `Cassandra.Ecto.Adapter`\n* `Cassandra.Ecto.Storage`\n* `Cassandra.Ecto.Migration`\n\n## Usage example\n\n    # In your config/config.exs file\n    config :my_app, Repo,\n      keyspace: \"my_keyspace\"\n\n    # In your application code\n    defmodule Repo do\n      use Ecto.Repo,\n        otp_app: :my_app,\n        adapter: Cassandra.Ecto\n    end\n\n    defmodule Post do\n      use Ecto.Model\n\n      @primary_key {:id, :binary_id, autogenerate: true}\n      schema \"posts\" do\n        field :title,    :string\n        field :text,     :string\n        field :tags,     {:array, :string}\n        timestamps()\n      end\n    end\n\n    defmodule Simple do\n      import Ecto.Query\n\n      def sample_query do\n        query = from p in Post, where: \"elixir\" in p.tags\n        Repo.all(query, allow_filtering: true)\n      end\n    end\n\n## Available connection options\n\n    :nodes\n    :keyspace\n    :auth\n    :ssl\n    :protocol_version\n    :pool_max_size\n    :pool_min_size\n    :pool_cull_interval\n\nBy default `nodes: [{\"127.0.0.1\", 9042}]`\n\nPlease see [CQErl connecting](https://github.com/matehat/cqerl#connecting) for\nother options information.\n\n","module":"Elixir.Cassandra.Ecto","id":"Cassandra.Ecto"},{"type":null,"source":"lib/cassandra_ecto/adapter.ex:2","object_type":"ModuleObject","moduledoc":"Implements `Ecto.Adapter` behaviour.\n\n## Queries\n\nCassandra repo supports only following keywords for `Ecto.Query.from/2`:\n\n    :where\n    :order_by\n    :limit\n    :select\n    :preload\n\n> NOTE: don't try to find `:offset`. It's not supported by Cassandra.\n\n> NOTE: you should remember that by default in Cassandra it is not possible\n> to filter and order by non primary key columns. To override this behaviour\n> you could pass additional option `allow_filtering: true`. But it is not\n> recommended, because of strong performance penalty. So it is very common\n> to add extra tables that better fits specific queries, also you are free to\n> create additional seconary indexes.\n>\n>     Repo.all((from p in Post, where: \"abra\" in p.tags), allow_filtering: true)\n\n## Upserts, updates and conditional inserts\n\nBy default in Cassandra `insert` and `update` both are equivalent to `upsert`.\nBut `Ecto` by default expects that if record already exists it will raise error.\nSo when `Cassandra.Ecto` executes `insert` it makes it conditional with `IF NOT EXISTS`\nto emulate `Ecto` default behaviour. To perform `upsert` with `insert` just\nuse option `on_conflict: :nothing`.\n\n### Comparision table\n\n    Ecto function       on_conflict     Cassandra\n    -------------       -----------     ---------\n    insert/2            :raise          insert with 'IF NOT EXISTS'\n    insert/2            :nothing        insert/upsert\n    update/2            (no option)     update/upsert\n\n## Batched queries\n\nBatched queries are done by `Ecto.Repo.insert_all/3` with option `batched: true`.\nBy default all batched queries runs in `:logged` mode. But it is possible to\noverride this on two levels:\n\n1. Repo level, by setting `:batch_mode` repo option\n\n        config :my_app, Repo,\n          adapter: Cassandra.Ecto\n          batch_mode: :unlogged\n\n2. Query level, by setting `:batch_mode` query option\n\n        Repo.insert_all(Post, posts, on_conflict: :nothing, batched: true, batch_mode: :unlogged)\n\nAvailable types:\n\n    :logged\n    :unlogged\n    :serial\n\nDefault type is `:logged`.\n\n> NOTE: don't forget to set proper `:on_conflict` option.\n\nLearn more about using batching in\n[Using and misusing batches](https://docs.datastax.com/en/cql/3.3/cql/cql_using/useBatch.html)\n\n## Consistency\n\nThere are to options to configure consistency:\n\n1. Tunable consistency.\n\n  Sets by `:consistency` option. Available types:\n\n        :any\n        :one\n        :two\n        :three\n        :quorum\n        :all\n        :local_quorum\n        :each_quorum\n\n  Default type is `:one`.\n\n2. Linearizable consistency.\n\n  Sets by `:serial_consistency` option. Available types:\n\n        :serial\n        :local_serial\n\n  Default type is `:undefined`.\n\nEvery type of consistency can be set at repo and query level deparately.\n\nPlease see [Consistency](https://docs.datastax.com/en/cassandra/3.x/cassandra/dml/dmlAboutDataConsistency.html)\nfor more information.\n\n## TIMESTAMP and TTL\n\nYou can specify TTL and TIMESTAMP with `:ttl` and `:timestamp` respectively\non query level.\n\n## Transactions\n\nCASSANDRA DOESN'T SUPPORT TRANSACTIONS!\n\n","module":"Elixir.Cassandra.Ecto.Adapter","id":"Cassandra.Ecto.Adapter"},{"type":null,"source":"lib/cassandra_ecto/adapter/cql.ex:2","object_type":"ModuleObject","moduledoc":"Generates CQL-queries for Cassandra DML statements.\n","module":"Elixir.Cassandra.Ecto.Adapter.CQL","id":"Cassandra.Ecto.Adapter.CQL"},{"type":null,"source":"lib/cassandra_ecto/connection.ex:2","object_type":"ModuleObject","moduledoc":"Manages connection to Cassandra DB.\n","module":"Elixir.Cassandra.Ecto.Connection","id":"Cassandra.Ecto.Connection"},{"type":null,"source":"lib/cassandra_ecto/log.ex:2","object_type":"ModuleObject","moduledoc":"Manages logging\n","module":"Elixir.Cassandra.Ecto.Log","id":"Cassandra.Ecto.Log"},{"type":null,"source":"lib/cassandra_ecto/migration.ex:2","object_type":"ModuleObject","moduledoc":"Implements `Ecto.Adapter.Migration` behaviour.\n\n## Defining Cassandra migrations\n\nYour migration module should use `Cassandra.Ecto.Migration` instead of\n`Ecto.Migration` to be able to use additional features.\n\nAny table must have option `primary_key: false` because Cassandra doesn't\nhave `serial` type.\n\n    defmodule TestMigration do\n      use Cassandra.Ecto.Migration\n\n      def up do\n        create table(:test, primary_key: false) do\n          add :id, :uuid, primary_key: true\n          add :value, :integer\n        end\n      end\n    end\n\n## Primary keys\n\nThere are two different methods to define primary keys.\n\n1. With `:primary_key` column option\n\n        create table(:test, primary_key: false) do\n          add :id, :uuid, primary_key: true\n          add :id2, :uuid, primary_key: true\n          add :id3, :uuid, primary_key: true\n        end\n\n  In this case `id` column will be partition key and rest, `id2` and `id3`,\n  will be clustering columns.\n\n2. With `:partition_key` and `:clustering_column` options\n\n        create table(:test, primary_key: false) do\n          add :id, :uuid, partition_key: true\n          add :id2, :uuid, paritition_key: true\n          add :id3, :uuid, clustering_column: true\n        end\n\n  In this case we have defined composite partition key and one clustering column.\n  More info about composite keys in [Using a composite partition key](https://docs.datastax.com/en/cql/3.3/cql/cql_reference/refCompositePk.html).\n\n> NOTE: It is not possible to use both methods together. The rule of thumb is:\n> if you don't use compound partition key just stay with `:primary_key`.\n\n## Static columns\n\nTo define `static` column use column option `static: true`\n\n    create table(:test, primary_key: false) do\n      add :id, :uuid, primary_key: true\n      add :clustering_id, :uuid, primary_key: true\n      add :value, :integer, static: true\n    end\n\nMore info about static columns in [Sharing a static column](https://docs.datastax.com/en/cql/3.3/cql/cql_reference/refStaticCol.html).\n\n## Setting table options\n\nUse `:options` option to define additional settings for table:\n\n    create table(:test, primary_key: false, options: [\n      clustering_order_by: [value: :desc, value2: :asc],\n      id: \"5a1c395e-b41f-11e5-9f22-ba0be0483c18\", compact_storage: true,\n      comment: \"Test\", read_repair_chance: 1.0,\n      compression: [sstable_compression: \"DeflateCompressor\", chunk_length_kb: 64]]) do\n      add :id, :uuid, partition_key: true\n      add :id2, :uuid, partition_key: true\n      add :value, :integer, clustering_column: true\n      add :value2, :integer, clustering_column: true\n    end\n\nFor full list of properties please see\n[Table properties](https://docs.datastax.com/en/cql/3.3/cql/cql_reference/tabProp.html).\n\n## Data type mapping\n\n    Migration type                  Cassandra type\n    --------------                  --------------\n    :id                             int\n    :integer                        int\n    :datetime                       timestamp\n    :naive_datetime                 timestamp\n    :utc_datetime                   timestamp\n    :binary_id                      uuid\n    :uuid                           uuid\n    :binary                         blob\n    :string                         text\n    :counter                        counter\n    :map                            map<varchar, blob>\n    {:map, :integer}                map<varchar, int>\n    {:map, {:integer, :string}      map<int, text>\n    {:array, :integer}              list<int>\n    {:list, :integer}               list<int>\n    {:set, :integer}                set<int>\n    {:tuple, {:integer, :integer}}  tuple<int, int>\n    {:frozen, :integer}             frozen<int>\n    :udt_type                       udt_type\n\nIt is possible to nest types like so:\n\n    {:map, {:integer, {:frozen, {:map, {:integer, :integer}}}}}\n\n## User defined types (UDT's)\n\nIt is possible to define Cassandra UDT's and use as column type in table\ndefinitions.\n\n    defmodule PostsMigration do\n      use Cassandra.Ecto.Migration\n      def change do\n        create type(:comment) do\n          add :id,        :uuid\n          add :text,      :text\n          add :posted_at, :utc_datetime\n        end\n        create table(:posts, primary_key: false) do\n          add :id,        :uuid,   primary_key: true\n          add :title,     :string\n          add :text,      :text\n          add :comments,  {:array, {:frozen, :comment}}\n        end\n      end\n    end\n\nLater you can use it in your schema definition:\n\n    defmodule Comment do\n      use Schema\n      embedded_schema do\n        field :text, :string\n        field :posted_at, :utc_datetime\n      end\n    end\n\n    defmodule Post do\n      use Schema\n      alias Cassandra.Ecto.Spec.Support.Schemas.Comment\n      schema \"posts\" do\n        @primary_key {:id, :binary_id, autogenerate: true}\n        field :title,    :string\n        field :text,     :string\n        embeds_many :comments, Comment\n      end\n    end\n\nMore info about UDT's in [User-defined type](https://docs.datastax.com/en/cql/3.3/cql/cql_reference/cqlRefUDType.html).\n\n## Custom indexes\n\nYou can define any custom index like so:\n\n    create index(:test, [:value], using: \"org.apache.cassandra.index.sasi.SASIIndex\",\n      options: [mode: :contains, case_sensitive: false,\n      analyzer_class: \"org.apache.cassandra.index.sasi.analyzer.NonTokenizingAnalyzer\"])\n\nMore info about custom indexes in [CREATE CUSTOM INDEX (SASI)](https://docs.datastax.com/en/cql/3.3/cql/cql_reference/refCreateSASIIndex.html).\n\n","module":"Elixir.Cassandra.Ecto.Migration","id":"Cassandra.Ecto.Migration"},{"type":null,"source":"lib/cassandra_ecto/migration/cql.ex:2","object_type":"ModuleObject","moduledoc":"Generates CQL-queries for Cassandra DDL statements.\n","module":"Elixir.Cassandra.Ecto.Migration.CQL","id":"Cassandra.Ecto.Migration.CQL"},{"type":null,"source":"lib/cassandra_ecto/storage.ex:2","object_type":"ModuleObject","moduledoc":"Implements `Ecto.Adapter.Storage` behaviour.\n\n## Examples\n\n    Cassandra.Ecto.Storage.storage_up(keyspace: \"my_keyspace\")\n\n    Cassandra.Ecto.Storage.storage_up(\n      keyspace: \"my_keyspace\",\n      replication: {\"NetworkTopologyStrategy\",\n                    dc1: 1, dc2: 2, dc3: 3})\n","module":"Elixir.Cassandra.Ecto.Storage","id":"Cassandra.Ecto.Storage"},{"type":null,"source":"lib/cassandra_ecto/storage/cql.ex:2","object_type":"ModuleObject","moduledoc":"Generates CQL-queries for managing keyspaces.\n","module":"Elixir.Cassandra.Ecto.Storage.CQL","id":"Cassandra.Ecto.Storage.CQL"},{"type":null,"source":"lib/cassandra_ecto/stream.ex:2","object_type":"ModuleObject","moduledoc":"Streaming support.\n","module":"Elixir.Cassandra.Ecto.Stream","id":"Cassandra.Ecto.Stream"},{"type":null,"source":"lib/cassandra_ecto/types.ex:2","object_type":"ModuleObject","moduledoc":"Represents custom Cassandra types.\n\n## Example\n\n    schema \"posts\" do\n      field :title,    :string\n      field :text,     :string\n      field :public,   :boolean\n      field :tags,     {:array, :string}\n      field :location, Cassandra.Types.Tuple\n      field :links,    {:map, :string}\n      embeds_many :comments, Comment\n      belongs_to  :author,   User\n      timestamps()\n    end\n\n> TODO: current implementation is quite useless. Next step is to implement\n> custom composite types on `Ecto` level.\n","module":"Elixir.Cassandra.Types","id":"Cassandra.Types"},{"type":null,"source":"lib/cassandra_ecto/types.ex:24","object_type":"ModuleObject","moduledoc":"Represents any type. Passes data to Cassandra as is.\n","module":"Elixir.Cassandra.Types.Any","id":"Cassandra.Types.Any"},{"type":null,"source":"lib/cassandra_ecto/types.ex:56","object_type":"ModuleObject","moduledoc":"Represents Cassandra list type.\n","module":"Elixir.Cassandra.Types.List","id":"Cassandra.Types.List"},{"type":null,"source":"lib/cassandra_ecto/types.ex:45","object_type":"ModuleObject","moduledoc":"Represents Cassandra map type.\n","module":"Elixir.Cassandra.Types.Map","id":"Cassandra.Types.Map"},{"type":null,"source":"lib/cassandra_ecto/types.ex:67","object_type":"ModuleObject","moduledoc":"Represents Cassandra set type.\n","module":"Elixir.Cassandra.Types.Set","id":"Cassandra.Types.Set"},{"type":null,"source":"lib/cassandra_ecto/types.ex:34","object_type":"ModuleObject","moduledoc":"Represents Cassandra tuple type.\n","module":"Elixir.Cassandra.Types.Tuple","id":"Cassandra.Types.Tuple"},{"type":"impl","source":"lib/cassandra_ecto/stream.ex:20","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Enumerable.Cassandra.Ecto.Stream","id":"Enumerable.Cassandra.Ecto.Stream"},{"type":"def","source":"lib/cassandra_ecto.ex:101","signature":[["type",[],null]],"object_type":"FunctionObject","name":"autogenerate","module_id":"Cassandra.Ecto","id":"autogenerate/1","doc":"See `Cassandra.Ecto.Adapter.autogenerate/1`.","arity":1},{"type":"def","source":"lib/cassandra_ecto.ex:91","signature":[["repo",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"Cassandra.Ecto","id":"child_spec/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto.ex:99","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Cassandra.Ecto","id":"delete/4","doc":"See `Cassandra.Ecto.Adapter.delete/4`.","arity":4},{"type":"def","source":"lib/cassandra_ecto.ex:103","signature":[["primitive",[],null],["type",[],null]],"object_type":"FunctionObject","name":"dumpers","module_id":"Cassandra.Ecto","id":"dumpers/2","doc":"See `Cassandra.Ecto.Adapter.dumpers/2`.","arity":2},{"type":"def","source":"lib/cassandra_ecto.ex:96","signature":[["repo",[],null],["meta",[],null],["query",[],null],["params",[],null],["preprocess",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"execute","module_id":"Cassandra.Ecto","id":"execute/6","doc":"See `Cassandra.Ecto.Adapter.execute/6`.","arity":6},{"type":"def","source":"lib/cassandra_ecto.ex:115","signature":[["repo",[],null],["command",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"execute_ddl","module_id":"Cassandra.Ecto","id":"execute_ddl/3","doc":"See `Cassandra.Ecto.Migration.execute_ddl/3`.","arity":3},{"type":"def","source":"lib/cassandra_ecto.ex:97","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["on_conflict",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"insert","module_id":"Cassandra.Ecto","id":"insert/6","doc":"See `Cassandra.Ecto.Adapter.insert/6`.","arity":6},{"type":"def","source":"lib/cassandra_ecto.ex:100","signature":[["repo",[],null],["meta",[],null],["header",[],null],["rows",[],null],["on_conflict",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"insert_all","module_id":"Cassandra.Ecto","id":"insert_all/7","doc":"See `Cassandra.Ecto.Adapter.insert_all/7`.","arity":7},{"type":"def","source":"lib/cassandra_ecto.ex:102","signature":[["primitive",[],null],["type",[],null]],"object_type":"FunctionObject","name":"loaders","module_id":"Cassandra.Ecto","id":"loaders/2","doc":"See `Cassandra.Ecto.Adapter.loaders/2`.","arity":2},{"type":"def","source":"lib/cassandra_ecto.ex:95","signature":[["func",[],null],["query",[],null]],"object_type":"FunctionObject","name":"prepare","module_id":"Cassandra.Ecto","id":"prepare/2","doc":"See `Cassandra.Ecto.Adapter.prepare/2`.","arity":2},{"type":"def","source":"lib/cassandra_ecto.ex:88","signature":[["repo",[],null],["statement",[],null],["\\\\",[],[["values",[],null],[]]],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"query","module_id":"Cassandra.Ecto","id":"query/4","doc":null,"arity":4},{"type":"def","source":"lib/cassandra_ecto.ex:111","signature":[["opts",[],null]],"object_type":"FunctionObject","name":"storage_down","module_id":"Cassandra.Ecto","id":"storage_down/1","doc":"See `Cassandra.Ecto.Storage.storage_down/1`.","arity":1},{"type":"def","source":"lib/cassandra_ecto.ex:110","signature":[["opts",[],null]],"object_type":"FunctionObject","name":"storage_up","module_id":"Cassandra.Ecto","id":"storage_up/1","doc":"See `Cassandra.Ecto.Storage.storage_up/1`.","arity":1},{"type":"def","source":"lib/cassandra_ecto.ex:120","signature":[["repo",[],null],["meta",[],null],["prepared",[],null],["params",[],null],["preprocess",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"stream","module_id":"Cassandra.Ecto","id":"stream/6","doc":"See `Cassandra.Ecto.Stream.stream/6`.","arity":6},{"type":"def","source":"lib/cassandra_ecto.ex:116","signature":[],"object_type":"FunctionObject","name":"supports_ddl_transaction?","module_id":"Cassandra.Ecto","id":"supports_ddl_transaction?/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto.ex:98","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["filters",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"update","module_id":"Cassandra.Ecto","id":"update/6","doc":"See `Cassandra.Ecto.Adapter.update/6`.","arity":6},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:193","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"autogenerate","module_id":"Cassandra.Ecto.Adapter","id":"autogenerate/1","doc":"See `c:Ecto.Adapter.autogenerate/1`\n","arity":1},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:132","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"delete","module_id":"Cassandra.Ecto.Adapter","id":"delete/4","doc":"See `c:Ecto.Adapter.delete/4`\n","arity":4},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:211","signature":[["datetime",[],null],["type",[],null]],"object_type":"FunctionObject","name":"dumpers","module_id":"Cassandra.Ecto.Adapter","id":"dumpers/2","doc":"See `c:Ecto.Adapter.dumpers/2`\n","arity":2},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:119","signature":[["repo",[],null],["map",[],"Elixir"],["arg",[],"Elixir"],["params",[],null],["process",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"execute","module_id":"Cassandra.Ecto.Adapter","id":"execute/6","doc":"See `c:Ecto.Adapter.execute/6`\n","arity":6},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:142","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["on_conflict",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"insert","module_id":"Cassandra.Ecto.Adapter","id":"insert/6","doc":"See `c:Ecto.Adapter.insert/6`\n","arity":6},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:160","signature":[["repo",[],null],["meta",[],null],["header",[],"Elixir"],["rows",[],null],["on_conflict",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"insert_all","module_id":"Cassandra.Ecto.Adapter","id":"insert_all/7","doc":"See `c:Ecto.Adapter.insert_all/7`\n","arity":7},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:204","signature":[["datetime",[],null],["type",[],null]],"object_type":"FunctionObject","name":"loaders","module_id":"Cassandra.Ecto.Adapter","id":"loaders/2","doc":"See `c:Ecto.Adapter.loaders/2`\n","arity":2},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:237","signature":[["func",[],null],["query",[],null]],"object_type":"FunctionObject","name":"prepare","module_id":"Cassandra.Ecto.Adapter","id":"prepare/2","doc":"See `c:Ecto.Adapter.prepare/2`\n","arity":2},{"type":"def","source":"lib/cassandra_ecto/adapter.ex:177","signature":[["repo",[],null],["meta",[],null],["fields",[],null],["filters",[],null],["returning",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"update","module_id":"Cassandra.Ecto.Adapter","id":"update/6","doc":"See `c:Ecto.Adapter.update/6`\n","arity":6},{"type":"def","source":"lib/cassandra_ecto/adapter/cql.ex:10","signature":[["atom",[],"Elixir"],["query",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"to_cql","module_id":"Cassandra.Ecto.Adapter.CQL","id":"to_cql/3","doc":null,"arity":3},{"type":"def","source":"lib/cassandra_ecto/adapter/cql.ex:38","signature":[["atom",[],"Elixir"],["map",[],"Elixir"],["fields",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"to_cql","module_id":"Cassandra.Ecto.Adapter.CQL","id":"to_cql/4","doc":null,"arity":4},{"type":"def","source":"lib/cassandra_ecto/adapter/cql.ex:29","signature":[["atom",[],"Elixir"],["map",[],"Elixir"],["fields",[],null],["on_conflict",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"to_cql","module_id":"Cassandra.Ecto.Adapter.CQL","id":"to_cql/5","doc":null,"arity":5},{"type":"def","source":"lib/cassandra_ecto/connection.ex:76","signature":[["repo",[],null],["queries",[],null],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"batch","module_id":"Cassandra.Ecto.Connection","id":"batch/3","doc":null,"arity":3},{"type":"def","source":"lib/cassandra_ecto/connection.ex:83","signature":[["repo",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"child_spec","module_id":"Cassandra.Ecto.Connection","id":"child_spec/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["old",[],"Elixir"],["state",[],null],["extra",[],"Elixir"]],"object_type":"FunctionObject","name":"code_change","module_id":"Cassandra.Ecto.Connection","id":"code_change/3","doc":false,"arity":3},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["msg",[],null],["from",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_call","module_id":"Cassandra.Ecto.Connection","id":"handle_call/3","doc":false,"arity":3},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["msg",[],null],["state",[],null]],"object_type":"FunctionObject","name":"handle_cast","module_id":"Cassandra.Ecto.Connection","id":"handle_cast/2","doc":false,"arity":2},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["msg",[],"Elixir"],["state",[],null]],"object_type":"FunctionObject","name":"handle_info","module_id":"Cassandra.Ecto.Connection","id":"handle_info/2","doc":false,"arity":2},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["args",[],null]],"object_type":"FunctionObject","name":"init","module_id":"Cassandra.Ecto.Connection","id":"init/1","doc":false,"arity":1},{"type":"def","source":"lib/cassandra_ecto/connection.ex:69","signature":[["repo",[],null],["statement",[],null],["\\\\",[],[["values",[],null],[]]],["\\\\",[],[["opts",[],null],[]]]],"object_type":"FunctionObject","name":"query","module_id":"Cassandra.Ecto.Connection","id":"query/4","doc":null,"arity":4},{"type":"def","source":"lib/cassandra_ecto/connection.ex:59","signature":[["repo",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"start_link","module_id":"Cassandra.Ecto.Connection","id":"start_link/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto/connection.ex:64","signature":[["repo",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"stop","module_id":"Cassandra.Ecto.Connection","id":"stop/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto/connection.ex:6","signature":[["reason",[],"Elixir"],["c",[],null]],"object_type":"FunctionObject","name":"terminate","module_id":"Cassandra.Ecto.Connection","id":"terminate/2","doc":false,"arity":2},{"type":"def","source":"lib/cassandra_ecto/log.ex:6","signature":[["repo",[],null],["params",[],null],["entry",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"log","module_id":"Cassandra.Ecto.Log","id":"log/4","doc":null,"arity":4},{"type":"def","source":"lib/cassandra_ecto/migration.ex:193","signature":[["repo",[],null],["command",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"execute_ddl","module_id":"Cassandra.Ecto.Migration","id":"execute_ddl/3","doc":"See `Ecto.Adapter.Migration.execute_ddl/3`\n","arity":3},{"type":"def","source":"lib/cassandra_ecto/migration.ex:178","signature":[["name",[],null]],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Ecto.Migration","id":"type/1","doc":"Defines Cassandra UDT\n\n### Example\n\n    create type(:comment) do\n      add :id,        :uuid\n      add :text,      :text\n      add :posted_at, :utc_datetime\n    end\n","arity":1},{"type":"def","source":"lib/cassandra_ecto/migration/cql.ex:15","signature":[["string",[],null]],"object_type":"FunctionObject","name":"to_cql","module_id":"Cassandra.Ecto.Migration.CQL","id":"to_cql/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/storage.ex:30","signature":[["opts",[],null]],"object_type":"FunctionObject","name":"storage_down","module_id":"Cassandra.Ecto.Storage","id":"storage_down/1","doc":"See `c:Ecto.Adapter.Storage.storage_down/1`\n","arity":1},{"type":"def","source":"lib/cassandra_ecto/storage.ex:17","signature":[["opts",[],null]],"object_type":"FunctionObject","name":"storage_up","module_id":"Cassandra.Ecto.Storage","id":"storage_up/1","doc":"See `c:Ecto.Adapter.Storage.storage_up/1`\n","arity":1},{"type":"def","source":"lib/cassandra_ecto/storage/cql.ex:8","signature":[["atom",[],"Elixir"],["opts",[],null]],"object_type":"FunctionObject","name":"to_cql","module_id":"Cassandra.Ecto.Storage.CQL","id":"to_cql/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto/stream.ex:11","signature":[["repo",[],null],["map",[],"Elixir"],["arg",[],"Elixir"],["params",[],null],["process",[],null],["opts",[],null]],"object_type":"FunctionObject","name":"stream","module_id":"Cassandra.Ecto.Stream","id":"stream/6","doc":null,"arity":6},{"type":"def","source":"lib/cassandra_ecto/types.ex:29","signature":[["value",[],null]],"object_type":"FunctionObject","name":"cast","module_id":"Cassandra.Types.Any","id":"cast/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:31","signature":[["value",[],null]],"object_type":"FunctionObject","name":"dump","module_id":"Cassandra.Types.Any","id":"dump/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:30","signature":[["value",[],null]],"object_type":"FunctionObject","name":"load","module_id":"Cassandra.Types.Any","id":"load/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:28","signature":[],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Types.Any","id":"type/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto/types.ex:61","signature":[["value",[],null]],"object_type":"FunctionObject","name":"cast","module_id":"Cassandra.Types.List","id":"cast/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:63","signature":[["value",[],null]],"object_type":"FunctionObject","name":"dump","module_id":"Cassandra.Types.List","id":"dump/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:62","signature":[["value",[],null]],"object_type":"FunctionObject","name":"load","module_id":"Cassandra.Types.List","id":"load/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:60","signature":[],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Types.List","id":"type/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto/types.ex:50","signature":[["value",[],null]],"object_type":"FunctionObject","name":"cast","module_id":"Cassandra.Types.Map","id":"cast/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:52","signature":[["value",[],null]],"object_type":"FunctionObject","name":"dump","module_id":"Cassandra.Types.Map","id":"dump/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:51","signature":[["value",[],null]],"object_type":"FunctionObject","name":"load","module_id":"Cassandra.Types.Map","id":"load/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:49","signature":[],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Types.Map","id":"type/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto/types.ex:72","signature":[["value",[],null]],"object_type":"FunctionObject","name":"cast","module_id":"Cassandra.Types.Set","id":"cast/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:74","signature":[["value",[],null]],"object_type":"FunctionObject","name":"dump","module_id":"Cassandra.Types.Set","id":"dump/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:73","signature":[["value",[],null]],"object_type":"FunctionObject","name":"load","module_id":"Cassandra.Types.Set","id":"load/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:71","signature":[],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Types.Set","id":"type/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto/types.ex:39","signature":[["value",[],null]],"object_type":"FunctionObject","name":"cast","module_id":"Cassandra.Types.Tuple","id":"cast/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:41","signature":[["value",[],null]],"object_type":"FunctionObject","name":"dump","module_id":"Cassandra.Types.Tuple","id":"dump/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:40","signature":[["value",[],null]],"object_type":"FunctionObject","name":"load","module_id":"Cassandra.Types.Tuple","id":"load/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/types.ex:38","signature":[],"object_type":"FunctionObject","name":"type","module_id":"Cassandra.Types.Tuple","id":"type/0","doc":null,"arity":0},{"type":"def","source":"lib/cassandra_ecto/stream.ex:20","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Enumerable.Cassandra.Ecto.Stream","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/cassandra_ecto/stream.ex:22","signature":[["",[],"Elixir"]],"object_type":"FunctionObject","name":"count","module_id":"Enumerable.Cassandra.Ecto.Stream","id":"count/1","doc":null,"arity":1},{"type":"def","source":"lib/cassandra_ecto/stream.ex:24","signature":[["",[],"Elixir"],["",[],"Elixir"]],"object_type":"FunctionObject","name":"member?","module_id":"Enumerable.Cassandra.Ecto.Stream","id":"member?/2","doc":null,"arity":2},{"type":"def","source":"lib/cassandra_ecto/stream.ex:26","signature":[["stream",[],null],["arg",[],"Elixir"],["fun",[],null]],"object_type":"FunctionObject","name":"reduce","module_id":"Enumerable.Cassandra.Ecto.Stream","id":"reduce/3","doc":null,"arity":3}],"language":"elixir","git_repo_url":"origin","client_version":"0.5.5","client_name":"inch_ex","branch_name":"master","args":[]}