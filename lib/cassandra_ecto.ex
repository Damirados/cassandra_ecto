defmodule Cassandra.Ecto do

  @behaviour Ecto.Adapter
  @behaviour Ecto.Adapter.Storage
  @behaviour Ecto.Adapter.Migration

  alias Cassandra.Ecto.Connection
  alias Cassandra.Ecto.Migration
  import Cassandra.Ecto.Helper

  defmacro __before_compile__(env) do
    config = Module.get_attribute(env.module, :config)
    name = Keyword.get(config, :pool_name, Module.concat(env.module, "Pool"))
    config = config |> Keyword.delete(:pool_name)
    quote do
      def __pool__, do: unquote(Macro.escape(config))
      def __pool_name__, do: unquote(name)

      defoverridable [__pool__: 0]
    end
  end

  def query(repo, statement, values \\ [], opts \\ []), do:
    Connection.query(repo, statement, values, opts)

  def child_spec(repo, opts), do: Connection.child_spec(repo, opts)

  ## Adapter
  alias Cassandra.Ecto.Adapter
  defdelegate execute(repo, meta, query, params, preprocess, opts), to: Adapter
  defdelegate insert(repo, meta, fields, on_conflict, returning, opts), to: Adapter

  def autogenerate(:id), do:
    error! nil,
      "Cassandra adapter does not support autogenerated :id field type in schema."

  @datetimes [:datetime, :utc_datetime, :naive_datetime]

  def loaders(:binary_id, type), do: [Ecto.UUID, type]
  def loaders(datetime, type) when datetime in @datetimes, do: [type, &timestamp_decode/1]
  def loaders(_primitive, type), do: [type]

  def dumpers(:binary_id, type), do: [type, Ecto.UUID]
  def dumpers(datetime, type) when datetime in @datetimes, do: [type, &timestamp_encode/1]
  def dumpers(_primitive, type), do: [type]

  def timestamp_decode(timestamp), do:
    {:ok, :calendar.datetime_to_gregorian_seconds(timestamp)}

  def timestamp_encode({{y, m, d}, {h, i, s, ms}}), do:
    {:ok, :calendar.datetime_to_gregorian_seconds({{y, m, d}, {h, i, s}})}


  def prepare(func, query), do: {:nocache, {func, query}}



  # def insert_all(repo, meta, _header, fields, returning, _opts) do
  # end
  #
  # def update(repo, meta, fields, filters, returning, _opts) do
  # end
  #
  # def delete(repo, meta, filters, _opts) do
  # end

  ## Storage
  alias Cassandra.Ecto.Storage
  defdelegate storage_up(opts), to: Storage
  defdelegate storage_down(opts), to: Storage

  ## Migration
  alias Cassandra.Ecto.Migration
  defdelegate execute_ddl(repo, command, opts), to: Migration
  def supports_ddl_transaction?, do: false
end
